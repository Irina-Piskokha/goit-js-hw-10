{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport iziToast from 'izitoast';\n\nimport 'flatpickr/dist/flatpickr.min.css';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst refs = {\n  dateTimePicker: document.querySelector('#datetime-picker'),\n  btnStart: document.querySelector('[data-start]'),\n  timer: document.querySelector('.timer'),\n};\n\nlet intervalId = null;\nlet userSelectedDate;\nrefs.btnStart.setAttribute('disabled', '');\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    const currentDate = new Date();\n    const delta = selectedDates[0] - currentDate;\n    if (delta <= 0) {\n      // window.alert('Please choose a date in the future');\n      iziToast.error({\n        title: 'Error',\n        message: 'Please choose a date in the future',\n        position: 'topRight',\n        titleColor: 'white',\n        color: '#ef4040',\n        messageColor: 'white',\n      });\n      refs.btnStart.setAttribute('disabled', '');\n      return;\n    } else {\n      refs.btnStart.removeAttribute('disabled');\n      userSelectedDate = selectedDates[0];\n    }\n  },\n};\n\nflatpickr(refs.dateTimePicker, options);\n\nrefs.btnStart.addEventListener('click', onButtonClick);\n\nfunction onButtonClick() {\n  const intervalId = setInterval(() => {\n    let currentDate = new Date();\n    const ms = userSelectedDate - currentDate;\n    if (ms <= 0) {\n      clearInterval(intervalId);\n      return;\n    }\n\n    refs.btnStart.setAttribute('disabled', '');\n    const date = convertMs(ms);\n    updateTextContent(date);\n  }, 1000);\n}\n\nfunction convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = Math.floor(ms / day);\n  // Remaining hours\n  const hours = Math.floor((ms % day) / hour);\n  // Remaining minutes\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  // Remaining seconds\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nfunction updateTextContent(date) {\n  Object.entries(date).forEach(([key, value], index) => {\n    refs.timer.children[index].firstElementChild.textContent =\n      addLeadingZero(value);\n  });\n}\n\nfunction addLeadingZero(value) {\n  return String(value).padStart(2, 0);\n}\n"],"names":["refs","userSelectedDate","options","selectedDates","currentDate","iziToast","flatpickr","onButtonClick","intervalId","ms","date","convertMs","updateTextContent","days","hours","minutes","seconds","key","value","index","addLeadingZero"],"mappings":"2GAMA,MAAMA,EAAO,CACX,eAAgB,SAAS,cAAc,kBAAkB,EACzD,SAAU,SAAS,cAAc,cAAc,EAC/C,MAAO,SAAS,cAAc,QAAQ,CACxC,EAGA,IAAIC,EACJD,EAAK,SAAS,aAAa,WAAY,EAAE,EAEzC,MAAME,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrB,MAAMC,EAAc,IAAI,KAExB,GADcD,EAAc,GAAKC,GACpB,EAAG,CAEdC,EAAS,MAAM,CACb,MAAO,QACP,QAAS,qCACT,SAAU,WACV,WAAY,QACZ,MAAO,UACP,aAAc,OACtB,CAAO,EACDL,EAAK,SAAS,aAAa,WAAY,EAAE,EACzC,MACN,MACMA,EAAK,SAAS,gBAAgB,UAAU,EACxCC,EAAmBE,EAAc,EAEpC,CACH,EAEAG,EAAUN,EAAK,eAAgBE,CAAO,EAEtCF,EAAK,SAAS,iBAAiB,QAASO,CAAa,EAErD,SAASA,GAAgB,CACvB,MAAMC,EAAa,YAAY,IAAM,CACnC,IAAIJ,EAAc,IAAI,KACtB,MAAMK,EAAKR,EAAmBG,EAC9B,GAAIK,GAAM,EAAG,CACX,cAAcD,CAAU,EACxB,MACD,CAEDR,EAAK,SAAS,aAAa,WAAY,EAAE,EACzC,MAAMU,EAAOC,EAAUF,CAAE,EACzBG,EAAkBF,CAAI,CACvB,EAAE,GAAI,CACT,CAEA,SAASC,EAAUF,EAAI,CAQrB,MAAMI,EAAO,KAAK,MAAMJ,EAAK,KAAG,EAE1BK,EAAQ,KAAK,MAAOL,EAAK,MAAO,IAAI,EAEpCM,EAAU,KAAK,MAAQN,EAAK,MAAO,KAAQ,GAAM,EAEjDO,EAAU,KAAK,MAASP,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAI,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEA,SAASJ,EAAkBF,EAAM,CAC/B,OAAO,QAAQA,CAAI,EAAE,QAAQ,CAAC,CAACO,EAAKC,CAAK,EAAGC,IAAU,CACpDnB,EAAK,MAAM,SAASmB,GAAO,kBAAkB,YAC3CC,EAAeF,CAAK,CAC1B,CAAG,CACH,CAEA,SAASE,EAAeF,EAAO,CAC7B,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,CAAC,CACpC"}